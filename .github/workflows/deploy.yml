name: Deploy to VPS

on:
  push:
    branches:
      - main  # Ejecutar cuando se haga un push a la rama principal

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Add known hosts
      run: |
        ssh-keyscan -p 5680 -H 149.50.146.48 >> ~/.ssh/known_hosts

    - name: Build and Push Docker Images
      run: |
        # Construir y etiquetar la imagen de la API
        docker build -t myapp:latest -f ./api/Dockerfile ./api
        docker tag myapp:latest myusername/myapp:latest  # Etiqueta para Docker Hub

        # Construir y etiquetar la imagen de Nginx
        docker build -t myapp-web:latest -f ./Dockerfile ./web
        docker tag myapp-web:latest myusername/myapp-web:latest  # Etiqueta para Docker Hub

        # Hacer login en Docker Hub
        echo "${{ secrets.DOCKER_USERNAME }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

        # Subir las imágenes a Docker Hub
        docker push myusername/myapp:latest
        docker push myusername/myapp-web:latest

    - name: Deploy via SSH
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 5680 root@149.50.146.48 "
          # Cambiar al directorio de tu aplicación
          cd /home/root/mis-proyectos/mi-app;

          # Detener los contenedores existentes
          docker-compose down;

          # Obtener la última versión del repositorio
          git pull origin main;

          # Construir y ejecutar los contenedores
          docker-compose up -d;
        "
